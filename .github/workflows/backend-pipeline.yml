# .github/workflows/backend-pipeline.yml
name: Backend CI/CD Pipeline

on:
  push:
    branches: [main, master]
    paths:
      - 'Stock-predictions-backend/**'
      - '.github/workflows/backend-pipeline.yml'
  pull_request:
    branches: [main, master]
    paths:
      - 'Stock-predictions-backend/**'
  workflow_dispatch:  # Manual trigger

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_DB: Stock_Predictor
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: Tha12345
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install backend dependencies
        run: |
          cd Stock-predictions-backend
          pip install -r requirements.txt

      - name: Set up test directories
        run: |
          mkdir -p Stock-predictions-backend/model_registry
          mkdir -p Stock-predictions-backend/monitoring_logs
          mkdir -p Stock-predictions-backend/monitoring_logs/predictions
          mkdir -p Stock-predictions-backend/monitoring_logs/performance
          mkdir -p Stock-predictions-backend/backtest_results
          mkdir -p Stock-predictions-backend/ml/tests
          touch Stock-predictions-backend/ml/tests/__init__.py

      - name: Run basic Django tests
        env:
          DATABASE_NAME: Stock_Predictor
          DATABASE_USER: postgres
          DATABASE_PASSWORD: Tha12345
          DATABASE_HOST: localhost
          DATABASE_PORT: 5432
        run: |
          cd Stock-predictions-backend
          python manage.py test ml.tests --exclude-tag=model_performance

      - name: Run model performance test
        env:
          DATABASE_NAME: Stock_Predictor
          DATABASE_USER: postgres
          DATABASE_PASSWORD: Tha12345
          DATABASE_HOST: localhost
          DATABASE_PORT: 5432
          MODEL_EPOCHS: 1
          MODEL_BATCH_SIZE: 32
        run: |
          cd Stock-predictions-backend
          python -c "
          import os, shutil
          if os.path.exists('model_registry'):
              print('Clearing old model registry')
              shutil.rmtree('model_registry')
          os.makedirs('model_registry', exist_ok=True)
          "
              
              # Directly run the command to train a model
              python manage.py train_models --stocks=AAPL --use-sample-data --force --epochs=1
              
              # Then run the test
              python manage.py test ml.tests.test_model_performance

      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-artifacts
          path: |
            Stock-predictions-backend/model_registry
            Stock-predictions-backend/backtest_results
            Stock-predictions-backend/model_training.log
  
  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Build and push backend
        uses: docker/build-push-action@v4
        with:
          context: ./Stock-predictions-backend
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/stock-prediction-backend:latest,${{ secrets.DOCKER_USERNAME }}/stock-prediction-backend:${{ github.sha }}
      
      - name: Create deployment tag
        run: |
          echo "DEPLOYMENT_TAG=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_ENV
      
      - name: Create deployment artifact
        run: |
          mkdir -p deployment
          echo "Backend image: ${{ secrets.DOCKER_USERNAME }}/stock-prediction-backend:${{ github.sha }}" > deployment/backend-image.txt
          echo "Deployment tag: ${{ env.DEPLOYMENT_TAG }}" >> deployment/backend-image.txt
      
      - name: Upload deployment artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-deployment-info
          path: deployment/