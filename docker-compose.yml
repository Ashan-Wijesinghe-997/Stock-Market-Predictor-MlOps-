# docker-compose.yml
version: '3.8'

services:
  db:
    image: postgres:14
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=Stock_Predictor
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=Tha12345
    ports:
      - "5432:5432"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./Stock-predictions-backend
      dockerfile: Dockerfile
    image: stock-predictions-backend:latest
    volumes:
      - ./Stock-predictions-backend:/app
      - model_registry:/app/model_registry
      - monitoring_logs:/app/monitoring_logs
      - backtest_results:/app/backtest_results
    ports:
      - "8000:8000"
    environment:
      - DEBUG=True
      - DJANGO_ALLOWED_HOSTS=localhost,127.0.0.1,backend
      - DATABASE_HOST=db
      - DATABASE_NAME=Stock_Predictor
      - DATABASE_USER=postgres
      - DATABASE_PASSWORD=Tha12345
      - MODEL_EPOCHS=5
      - MODEL_BATCH_SIZE=32
      - MODEL_LSTM_UNITS=64
      - MONITORING_ENABLED=true
      - REGISTRY_ENABLED=true
      - API_DEFAULT_STOCKS=AAPL,MSFT,NFLX,NVDA,DIS
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  
  frontend:
    build:
      context: ./Stock-predictions-frontend
      dockerfile: Dockerfile
    image: stock-predictions-frontend:latest
    volumes:
      - ./Stock-predictions-frontend:/app
      - /app/node_modules
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - app-network
  
  # New service for scheduled model training
  model-trainer:
    build:
      context: ./Stock-predictions-backend
      dockerfile: Dockerfile
    image: stock-predictions-backend:latest
    volumes:
      - ./Stock-predictions-backend:/app
      - model_registry:/app/model_registry
      - monitoring_logs:/app/monitoring_logs
      - backtest_results:/app/backtest_results
    command: >
      bash -c "
        echo 'Waiting for backend to become healthy...' &&
        sleep 60 &&
        python manage.py train_models --epochs 10 --use-sample-data &&
        echo 'Model training complete. Running backtests...' &&
        python manage.py backtest_model --stock AAPL --use-sample-data &&
        python manage.py backtest_model --stock MSFT --use-sample-data &&
        echo 'Backtesting complete.'
      "
    environment:
      - DATABASE_HOST=db
      - DATABASE_NAME=Stock_Predictor
      - DATABASE_USER=postgres
      - DATABASE_PASSWORD=Tha12345
      - MODEL_EPOCHS=10
      - MODEL_BATCH_SIZE=32
      - MODEL_LSTM_UNITS=64
      - MONITORING_ENABLED=true
      - REGISTRY_ENABLED=true
    depends_on:
      - backend
      - db
    networks:
      - app-network
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 3

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  model_registry:
  monitoring_logs:
  backtest_results: